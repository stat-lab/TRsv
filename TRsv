#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use threads;
use FindBin qw($Bin);

my $command = shift @ARGV;

my $args = join (' ', @ARGV);

@ARGV = ();

print STDERR "command: $command Args: $args\n";

my $help;

my $script_dir = "$Bin/scripts";

my $tool_test_dir = "$Bin/tool_test";

my $script = '';

my $out_prefix = '';
if ($args =~ /-prefix\s+(\S+)/){
    $out_prefix = $1;
}
elsif ($args =~ /-p\s+(\S+)/){
    $out_prefix = $1;
}
if ($command eq 'call'){
    my $hifi_flag = 0;
    if (($args eq '--help') or ($args eq '-help') or ($args eq '-h')){
        die "Please specify -x hifi or -x ont (e.g., TRsv call -x ont -help)\n";
    }
    elsif ($args =~ /-co*n*f*\s+(\S+)/){
        my $conf_file = $1;
        if (!-f $conf_file){
            die "Specified $conf_file does not exist:\n";
        }
        open (FILE, $conf_file);
        while (my $line = <FILE>){
            chomp $line;
            next if ($line =~ /^#|^$/);
            if ($line =~ /^platform\s+(\S+)/){
                my $platform = $1;
                if ($platform !~ /hifi|ont|clr/){
                    die "specified --platform $platform does not match either hifi|ont|clr:\n";
                }
                if ($platform eq 'hifi'){
                    $hifi_flag = 1;
                }
            }
            elsif ($line =~ /^prefix\s+(\S+)/){
                $out_prefix = $1;
            }
        }
        close (FILE);
    }
    elsif ($args =~ /-platform\s+(\S+)/){
        my $platform = $1;
        if ($platform !~ /hifi|ont|clr/){
            die "specified --platform $platform does not match either hifi|ont|clr:\n";
        }
        if ($platform eq 'hifi'){
            $hifi_flag = 1;
        }
    }
    elsif ($args =~ /-x\s+(\S+)/){
        my $platform = $1;
        if ($platform !~ /hifi|ont|clr/){
            die "specified --platform $platform does not match either hifi|ont|clr:\n";
        }
        if ($platform eq 'hifi'){
            $hifi_flag = 1;
        }
    }
    else{
        die "call command: --platform/-x option not specified in your argument or configure file:\n";
    }
    if ($hifi_flag == 1){
        $script = "$script_dir/TRsv_hifi_v1.1.pl";
    }
    else{
        $script = "$script_dir/TRsv_nonhifi_v1.1.pl";
    }
}
elsif ($command eq 'joint_call'){
    $script = "$script_dir/TRsv_joint_call.pl";
    die "Error: The -n or --thread_num option is not effective for joint call !!\n" if ($args =~ /-n\s+\d+/);
}
elsif ($command eq 'annotate'){
    $script = "$script_dir/TRsv_annotate.pl";
}
elsif (($command eq '--help') or ($command eq '-help') or ($command eq '-h')){
    pod2usage(-verbose => 0);
}
else{
    die "The first argument of LRsv must be either call, joint_call, or annotate:\n";
}

if (($args !~ /-h/) and ($out_prefix eq '')){
    die "--prefix is not specified:\n";
}

=head1 SYNOPSIS

  LRsv [command] <options for each command>

  commands:
   call                   Detect TR-CNVs inside TR regions and SVs/indels outside TR regions through four steps.
   joint_call             For vcf files from multiple samples, perform joint call with multiple vcfs to create a single vcf file.
   annotate               Add the annotation of the genes that overlap TR-CNVs/SVs/indels to a vcf file. The annotation includes gene ID, gene name, and gene region overlapping the variants.
   help                   Output help message
   
=cut



if ($args =~ /-h$|-h\s|-help/){
    $args = '-h';
    my $command2 = "$script $args";
    system ($command2);
}
else{
    if ($command eq 'call'){
        my $path = `echo $ENV{PATH}`;
        my @path = split (/:/, $path);
        my $yass_path = 0;
        my $trf_path = 0;
        my $multalin_path = 0;
        my $samtool_path = 0;
        my $minimap2_path = 0;
        foreach my $dir (@path){
            my $yass = "$dir/yass";
            my $trf = "$dir/trf";
            my $multalin = "$dir/multalin";
            my $samtool = "$dir/samtools";
            my $minimap2 = "$dir/minimap2";
            $yass_path = 1 if (-f $yass);
            $trf_path = 1 if (-f $trf);
            $multalin_path = 1 if (-f $multalin);
            $samtool_path = 1 if (-f $samtool);
            $minimap2_path = 1 if (-f $minimap2);
        }
        if ($samtool_path == 0){
            die "samtools is not set to PATH\n";
        }
        if ($minimap2_path == 0){
            die "minimap2 is not set to PATH\n";
        }
        if ($yass_path == 0){
            die "yass is not set to PATH\n";
        }
        if ($trf_path == 0){
            die "trf is not set to PATH\n";
        }
        if ($multalin_path == 0){
            die "multalin is not set to PATH\n";
        }
        my @yass_result = ();
        my @trf_result = ();
        system ("rm -f $tool_test_dir/multalin_test.cl2") if (-f "$tool_test_dir/multalin_test.cl2");
        system ("rm -f $tool_test_dir/multalin_test.msf") if (-f "$tool_test_dir/multalin_test.msf");
        @yass_result = `yass -O 20 -m 10 -i 10 $tool_test_dir/test1.fasta $tool_test_dir/test2.fasta 2>/dev/null`;
        @trf_result = `trf $tool_test_dir/test1.fasta 2 7 7 80 10 50 2000 -d -l 1 -h -ngs`;
        my @multalin_result = `multalin -q $tool_test_dir/multalin_test.fasta`;
        if (@yass_result < 20){
            die "yass seems not to be properly installed:\n";
        }
        if (@trf_result < 2){
            die "trf seems not to be properly installed:\n";
        }
        foreach (@multalin_result){
            chomp $_;
            if ($_ =~ /Error/){
                die "multalin seems not to be properly installed or MULTALIN environment variable is not set:\n";
            }
        }
        if (!-f "$tool_test_dir/multalin_test.msf"){
            die "multalin seems not to be properly installed or MULTALIN environment variable is not set:\n";
        }
    }
    my $command2 = "$script $args";

    my $command_log = "$out_prefix.command.log";

    open (OUT, ">> $command_log");
    print OUT "LRsv $command: $command2\n";
    close (OUT);

    system ($command2);
}


